#!/bin/bash
vmname="OAM" #-----------#

echo -e "\033[1;31m*************************************************************************************************\033[m"
echo -e "\033[1;33m            HEALTH CHECK FOR $vmname NODE `hostname`\033[m"
echo -e "\033[1;33m                    `date`\033[m"
echo -e "\033[1;31m*************************************************************************************************\033[m"
echo " "

id=`whoami`
if [ $id != "ecp" ]; then #-----------#
  echo
  echo "Aborted. Please run from ecp login only."
  echo
  exit
fi

site=`hostname | cut -d- -f1`
case $site in
  KCA) ;;
  HRC) ;;
    *) echo "ERROR: Host name (`hostname`) should start with kca- or hrc-"
       echo "Aborting."
       exit ;;
esac

#node_num=`hostname | tail -c 2`
node_num=`hostname | sed -e 's/.*-OAM\([0-9]*\)/\1/'` #-----------#

#if [ $site == kca ]; then
#  db1_name="kca-vas-cas-db1"
#  db1_ip="10.237.92.103"
#  db2_name="kca-vas-cas-db2"
#  db2_ip="10.237.92.104"
#else
#  db1_name="hrc-vas-cas-db1"
#  db1_ip="10.237.85.39"
#  db2_name="hrc-vas-cas-db2"
#  db2_ip="10.237.85.40"
#fi

if [ $site == KCA ]; then #-----------#
  db1_name="KCA-SMP-DB01"
  db1_ip="10.0.149.38"
  db2_name="KCA-SMP-DB02"
  db2_ip="10.0.149.39"
fi

#######################################################################################

/usr/bin/monit -c /prd/ecp/others/monit/monitrc summary
not_running=`/usr/bin/monit -c /prd/ecp/others/monit/monitrc summary| grep Process|grep -v 'OK'| wc -l` #-----------#
if [ $not_running -gt 0 ]; then
  echo -e "\033[1;31m[ ALARM $(date) ]  $not_running Services DOWN\033[m"
  echo
fi

echo
echo -e "\033[1;34m*************************************************************************************************\033[m"
echo -e "\033[1;33mConnectivity to DB NODES \033[m"
echo -e "\033[1;34m*************************************************************************************************\033[m"
###### To display output on screen use ping | tee /dev/tty 
ping -c5 $db1_ip | grep transmitted | sed -e 's/.* \([0-9]\+\)%.*/\1/' | \
awk -v db1_ip="$db1_ip" '{ \
  if ($1 < 40) \
    print "\033[1;32mPing to DB-1 node (" db1_ip ")                                                         [ PASS ]\033[m"; \
  else \
    print "\033[1;31m[ ALARM ] Ping to DB-1 node " db1_ip " FAILED\033[m" \
}'

ping -c5 $db2_ip | grep transmitted | sed -e 's/.* \([0-9]\+\)%.*/\1/' | \
awk -v db2_ip="$db2_ip" '{ \
  if ($1 < 40) \
    print "\033[1;32mPing to DB-2 node (" db2_ip ")                                                         [ PASS ]\033[m"; \
  else \
    print "\033[1;31m[ ALARM ] Ping to DB-2 node " db2_ip " FAILED\033[m" \
}'


echo
echo -e "\033[1;34m*************************************************************************************************\033[m"
echo -e "\033[1;33mCHECK Disk Partition, CPU, Memory Utilization                                                    \033[m"
echo -e "\033[1;34m*************************************************************************************************\033[m"

#echo $ df -khP

dfout=/tmp/df.$$
df -khP > $dfout
while IFS= read -r line; do
  # is there a number followed by % ?
  # no  : Filesystem            Size  Used Avail Use% Mounted on
  # yes : /dev/sda1             488M  112M  352M  25% /boot
  match=`echo "$line" | sed -e 's/.* \([0-9]\+\)%.*/\1/' | grep ^\[0-9\]*$ | wc -l`
  echo -n -e "$line"
  if [ $match -eq 0 ]; then
    # just newline
    echo
  else
    line_len=`echo "$line" | wc -c`
    let pad="75-$line_len"
    for i in `eval echo {1..$pad}`
    do
     echo -n " "
    done
    # Check percent value < 80% and print PASS/ALARM.
    echo "$line" | sed -e 's/.* \([0-9]\+\)%.*/\1/' | grep ^\[0-9\]*$ | \
    awk '{\
      if ($1 > 80) print "\033[1;31m[ ALARM ] : Usage EXCEEDS 80% \033[m"; \
      else print "\033[1;32m Usage <= 80 % [ PASS ]\033[m"\
    }'
  fi
done < $dfout
rm -f $dfout

# CPU Utilization
sar | grep -i average | \
awk '{\
  FS=" "; $IDLE=$8; \
  printf "\n\033[1;33mCPU average idle = "; \
  printf $IDLE; \
  printf " %, "; $cpu_load=100-$IDLE; \
  if ($cpu_load > 80) \
    print "\033[1;31m[ ALARM ] : Average LOAD", $cpu_load, "% EXCEEDS", 80, "%\033[m\n\n" ; \
    else print "Average LOAD = ", $cpu_load, "%\n\033[1;32mCPU Utilization <= 80 %                                                                  [ PASS ]\033[m\n"\
}'

# Memory Utilization
free -m
#               total        used        free      shared  buff/cache   available
# Mem:          15867        2863         152         834       12850       11761
# Swap:          2047          35        2012

line=`free -m | grep Mem:`
total=`echo $line | cut -d" " -f2`
available=`echo $line | cut -d" " -f7`

# limit 90%
free -m | grep "Mem:" | \
awk '{ \
  FS=" "; \
  printf "\033[1;33mMEMORY total="; printf $2; \
  printf " MB, free="; printf $7; \
  printf " MB, used="; printf $2-$7; printf " MB, "; \
  $usage=($2-$7)*100/($2); \
  if ($usage > 90) \
    print "\033[1;31m      [ ALARM ] USAGE", $usage, "% EXCEEDS 90 %\033[m\n"; \
  else \
    print " USAGE = ", $usage, "%\n\033[1;32mMemory Utilization <= 90 %                                                               [ PASS ]\033[m\n";\
}'

echo -e "\033[1;34m*************************************************************************************************\033[m"
echo -e "\033[1;33m            HEALTH CHECK FOR $vmname NODE `hostname` DONE\033[m"
echo -e "\033[1;33m                    `date`\033[m"
echo -e "\033[1;34m*************************************************************************************************\033[m"
echo
